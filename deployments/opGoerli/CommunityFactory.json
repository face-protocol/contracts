{
  "address": "0x7E51bd255C405CB65855aC25dd578EC922501211",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_communityImplementation",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "community",
          "type": "address"
        }
      ],
      "name": "NewCommunity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "TreasuryUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "communityImplementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "rulesURI",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "membershipDeposit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "membershipVotesThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "votingDuration",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "initialMembers",
              "type": "address[]"
            },
            {
              "internalType": "string[]",
              "name": "initialMembersDatas",
              "type": "string[]"
            }
          ],
          "internalType": "struct ICommunity.CommunityInfo",
          "name": "info",
          "type": "tuple"
        }
      ],
      "name": "createCommunity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x98db700be44724973a840d86db46e5a29b9b2fa442516bd8c459c8a88cc9feab",
  "receipt": {
    "to": null,
    "from": "0x5D44FbBb92C7916E00d61D4Cf862B4adBc645168",
    "contractAddress": "0x7E51bd255C405CB65855aC25dd578EC922501211",
    "transactionIndex": 1,
    "gasUsed": "529844",
    "logsBloom": "0x
    "blockHash": "0xdc66c4084911fea09c2afbc7718376a2c7b490d440e3421299c551997cb1a1a1",
    "transactionHash": "0x98db700be44724973a840d86db46e5a29b9b2fa442516bd8c459c8a88cc9feab",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 13251739,
        "transactionHash": "0x98db700be44724973a840d86db46e5a29b9b2fa442516bd8c459c8a88cc9feab",
        "address": "0x7E51bd255C405CB65855aC25dd578EC922501211",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005d44fbbb92c7916e00d61d4cf862b4adbc645168"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xdc66c4084911fea09c2afbc7718376a2c7b490d440e3421299c551997cb1a1a1"
      }
    ],
    "blockNumber": 13251739,
    "cumulativeGasUsed": "576685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5D3EE2a6943B7e07120ac33dd5849074181be044",
    "0x5D44FbBb92C7916E00d61D4Cf862B4adBc645168"
  ],
  "numDeployments": 2,
  "solcInputHash": "7b0bed8cfe7492c6428b519d9a5f2ccf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_communityImplementation\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"community\",\"type\":\"address\"}],\"name\":\"NewCommunity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"communityImplementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rulesURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"membershipDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"membershipVotesThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingDuration\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"initialMembers\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"initialMembersDatas\",\"type\":\"string[]\"}],\"internalType\":\"struct ICommunity.CommunityInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"name\":\"createCommunity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"NewCommunity(address)\":{\"notice\":\"Event emitted on creation of new community\"},\"TreasuryUpdate(address)\":{\"notice\":\"Event emitted on treasury update\"}},\"kind\":\"user\",\"methods\":{\"communityImplementation()\":{\"notice\":\"Address of the Community implementation\"},\"constructor\":{\"notice\":\"Contract constructor\"},\"createCommunity((string,string,string,uint256,uint256,uint256,address[],string[]))\":{\"notice\":\"Function used to set up a new community\"},\"treasury()\":{\"notice\":\"Address of the protocol treasurty\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CommunityFactory.sol\":\"CommunityFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xbe63437e37e32162d5d11ea8f11a44378c092b4bcbb05b51a813fe4bf33297d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CommunityFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"./interfaces/ICommunity.sol\\\";\\nimport \\\"./interfaces/ICommunityFactory.sol\\\";\\n\\ncontract CommunityFactory is Ownable, ICommunityFactory {\\n    using Clones for address;\\n\\n    // STORAGE\\n\\n    /// @notice Address of the Community implementation\\n    address public communityImplementation;\\n\\n    /// @notice Address of the protocol treasurty\\n    address public treasury;\\n\\n    // EVENTS\\n\\n    /// @notice Event emitted on creation of new community\\n    event NewCommunity(address community);\\n\\n    /// @notice Event emitted on treasury update\\n    event TreasuryUpdate(address newTreasury);\\n\\n    // CONSTRUCTOR\\n\\n    /// @notice Contract constructor\\n    constructor(address _communityImplementation, address _treasury) {\\n        communityImplementation = _communityImplementation;\\n        treasury = _treasury;\\n    }\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Function used to set up a new community\\n    function createCommunity(\\n        ICommunity.CommunityInfo calldata info\\n    ) external payable {\\n        // Instantiate and initialize community\\n        address community = communityImplementation.clone();\\n        ICommunity(community).initialize{value: msg.value}(info);\\n\\n        // Emit event\\n        emit NewCommunity(community);\\n    }\\n\\n    function setTreasury(address newTreasury) external onlyOwner {\\n        // Update treasury\\n        treasury = newTreasury;\\n\\n        // Emit event\\n        emit TreasuryUpdate(newTreasury);\\n    }\\n}\\n\",\"keccak256\":\"0x50186abcfed75d971efee78d427bdb085576738a33267f63437cfa9286700105\",\"license\":\"MIT\"},\"contracts/interfaces/ICommunity.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\ninterface ICommunity is IERC721Upgradeable {\\n    // INITIALIZER\\n\\n    struct CommunityInfo {\\n        string name;\\n        string symbol;\\n        string rulesURI;\\n        uint256 membershipDeposit;\\n        uint256 membershipVotesThreshold;\\n        uint256 votingDuration;\\n        address[] initialMembers;\\n        string[] initialMembersDatas;\\n    }\\n\\n    function initialize(CommunityInfo calldata info) external payable;\\n\\n    // PUBLIC FUNCTIONS\\n\\n    /// @notice Function used to apply to community\\n    function applyForMembership(string calldata dataURI) external payable;\\n\\n    /// @notice Function for community members to approve acceptance of new member to community\\n    function approveMembership(address applicant) external;\\n\\n    /// @notice Function called by new member to start membership after successful vote\\n    function startMembership() external;\\n\\n    /// @notice Function to delegate reputation to other member\\n    function delegateReputation(address member, uint256 amount) external;\\n\\n    /// @notice Function to revoke reputation delegation from member\\n    function revokeReputation(address member) external;\\n\\n    /// @notice Function for protocol team to withdraw unused membership deposit (in case of refusal)\\n    function withdrawUnusedDeposit(address applicant) external;\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function rulesURI() external view returns (string memory);\\n\\n    function membershipDeposit() external view returns (uint256);\\n\\n    function membershipVotesThreshold() external view returns (uint256);\\n\\n    function votingDuration() external view returns (uint256);\\n\\n    function reputationOf(address member) external view returns (uint256);\\n\\n    function pastReputationOf(\\n        address member,\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n\\n    function totalReputation() external view returns (uint256);\\n\\n    function totalPastReputation(\\n        uint256 blockNumber\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x666c196502fb315ccd24605a213ff4dbe6ca42b7ebdfdd2e07e324fc58d173cc\",\"license\":\"MIT\"},\"contracts/interfaces/ICommunityFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport \\\"./ICommunity.sol\\\";\\n\\ninterface ICommunityFactory {\\n    /// @notice Function used to set up a new community\\n    function createCommunity(\\n        ICommunity.CommunityInfo calldata info\\n    ) external payable;\\n\\n    /// @notice Address of the protocol treasurty\\n    function treasury() external view returns (address);\\n}\\n\",\"keccak256\":\"0x74ecc47d8f3577773a6e08127fa1017ed6a0708dc7103e3528b6e81cc92077ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161086538038061086583398101604081905261002f916100d5565b61003833610069565b600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610108565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100d057600080fd5b919050565b600080604083850312156100e857600080fd5b6100f1836100b9565b91506100ff602084016100b9565b90509250929050565b61074e806101176000396000f3fe6080604052600436106100705760003560e01c80638e4254f41161004e5780638e4254f4146100e6578063dec0ef9f14610106578063f0f4426014610119578063f2fde38b1461013957600080fd5b806361d027b314610075578063715018a6146100b15780638da5cb5b146100c8575b600080fd5b34801561008157600080fd5b50600254610095906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100bd57600080fd5b506100c6610159565b005b3480156100d457600080fd5b506000546001600160a01b0316610095565b3480156100f257600080fd5b50600154610095906001600160a01b031681565b6100c661011436600461044b565b61016d565b34801561012557600080fd5b506100c66101343660046104a5565b61022d565b34801561014557600080fd5b506100c66101543660046104a5565b610289565b610161610307565b61016b6000610361565b565b600154600090610185906001600160a01b03166103b1565b9050806001600160a01b031663827eea7634846040518363ffffffff1660e01b81526004016101b49190610626565b6000604051808303818588803b1580156101cd57600080fd5b505af11580156101e1573d6000803e3d6000fd5b50506040516001600160a01b03851681527fcd522b2652c2c15d89aa349a4671138c31887ef87872622bfa065cbc6c610b95935060200191506102219050565b60405180910390a15050565b610235610307565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f8a3509a4057c89a5993a4a3140c2ebf7e829d325d8998eaa6c48adcff98b2cef9060200160405180910390a150565b610291610307565b6001600160a01b0381166102fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61030481610361565b50565b6000546001600160a01b0316331461016b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166104465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016102f2565b919050565b60006020828403121561045d57600080fd5b813567ffffffffffffffff81111561047457600080fd5b8201610100818503121561048757600080fd5b9392505050565b80356001600160a01b038116811461044657600080fd5b6000602082840312156104b757600080fd5b6104878261048e565b6000808335601e198436030181126104d757600080fd5b830160208101925035905067ffffffffffffffff8111156104f757600080fd5b80360382131561050657600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e1984360301811261054d57600080fd5b830160208101925035905067ffffffffffffffff81111561056d57600080fd5b8060051b360382131561050657600080fd5b8183526000602080850194508260005b858110156105bb576001600160a01b036105a88361048e565b168752958201959082019060010161058f565b509495945050505050565b60008383855260208086019550808560051b8301018460005b8781101561061957848303601f190189526105fa82886104c0565b61060585828461050d565b9a86019a94505050908301906001016105df565b5090979650505050505050565b60208152600061063683846104c0565b61010080602086015261064e6101208601838561050d565b925061065d60208701876104c0565b9250601f198087860301604088015261067785858461050d565b945061068660408901896104c0565b945091508087860301606088015261069f85858461050d565b945060608801356080880152608088013560a088015260a088013560c08801526106cc60c0890189610536565b94509150808786030160e08801526106e585858461057f565b94506106f460e0890189610536565b945091508087860301838801525061070d8484836105c6565b97965050505050505056fea264697066735822122092ca2fb8f870dd2bdb3c2177659717892f1d93601b151a0ee21c5ef8f3cea01b64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100705760003560e01c80638e4254f41161004e5780638e4254f4146100e6578063dec0ef9f14610106578063f0f4426014610119578063f2fde38b1461013957600080fd5b806361d027b314610075578063715018a6146100b15780638da5cb5b146100c8575b600080fd5b34801561008157600080fd5b50600254610095906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100bd57600080fd5b506100c6610159565b005b3480156100d457600080fd5b506000546001600160a01b0316610095565b3480156100f257600080fd5b50600154610095906001600160a01b031681565b6100c661011436600461044b565b61016d565b34801561012557600080fd5b506100c66101343660046104a5565b61022d565b34801561014557600080fd5b506100c66101543660046104a5565b610289565b610161610307565b61016b6000610361565b565b600154600090610185906001600160a01b03166103b1565b9050806001600160a01b031663827eea7634846040518363ffffffff1660e01b81526004016101b49190610626565b6000604051808303818588803b1580156101cd57600080fd5b505af11580156101e1573d6000803e3d6000fd5b50506040516001600160a01b03851681527fcd522b2652c2c15d89aa349a4671138c31887ef87872622bfa065cbc6c610b95935060200191506102219050565b60405180910390a15050565b610235610307565b600280546001600160a01b0319166001600160a01b0383169081179091556040519081527f8a3509a4057c89a5993a4a3140c2ebf7e829d325d8998eaa6c48adcff98b2cef9060200160405180910390a150565b610291610307565b6001600160a01b0381166102fb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61030481610361565b50565b6000546001600160a01b0316331461016b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016102f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b0381166104465760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b60448201526064016102f2565b919050565b60006020828403121561045d57600080fd5b813567ffffffffffffffff81111561047457600080fd5b8201610100818503121561048757600080fd5b9392505050565b80356001600160a01b038116811461044657600080fd5b6000602082840312156104b757600080fd5b6104878261048e565b6000808335601e198436030181126104d757600080fd5b830160208101925035905067ffffffffffffffff8111156104f757600080fd5b80360382131561050657600080fd5b9250929050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000808335601e1984360301811261054d57600080fd5b830160208101925035905067ffffffffffffffff81111561056d57600080fd5b8060051b360382131561050657600080fd5b8183526000602080850194508260005b858110156105bb576001600160a01b036105a88361048e565b168752958201959082019060010161058f565b509495945050505050565b60008383855260208086019550808560051b8301018460005b8781101561061957848303601f190189526105fa82886104c0565b61060585828461050d565b9a86019a94505050908301906001016105df565b5090979650505050505050565b60208152600061063683846104c0565b61010080602086015261064e6101208601838561050d565b925061065d60208701876104c0565b9250601f198087860301604088015261067785858461050d565b945061068660408901896104c0565b945091508087860301606088015261069f85858461050d565b945060608801356080880152608088013560a088015260a088013560c08801526106cc60c0890189610536565b94509150808786030160e08801526106e585858461057f565b94506106f460e0890189610536565b945091508087860301838801525061070d8484836105c6565b97965050505050505056fea264697066735822122092ca2fb8f870dd2bdb3c2177659717892f1d93601b151a0ee21c5ef8f3cea01b64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewCommunity(address)": {
        "notice": "Event emitted on creation of new community"
      },
      "TreasuryUpdate(address)": {
        "notice": "Event emitted on treasury update"
      }
    },
    "kind": "user",
    "methods": {
      "communityImplementation()": {
        "notice": "Address of the Community implementation"
      },
      "constructor": {
        "notice": "Contract constructor"
      },
      "createCommunity((string,string,string,uint256,uint256,uint256,address[],string[]))": {
        "notice": "Function used to set up a new community"
      },
      "treasury()": {
        "notice": "Address of the protocol treasurty"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2917,
        "contract": "contracts/CommunityFactory.sol:CommunityFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 8038,
        "contract": "contracts/CommunityFactory.sol:CommunityFactory",
        "label": "communityImplementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 8041,
        "contract": "contracts/CommunityFactory.sol:CommunityFactory",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}