// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApplicatonApproval extends ethereum.Event {
  get params(): ApplicatonApproval__Params {
    return new ApplicatonApproval__Params(this);
  }
}

export class ApplicatonApproval__Params {
  _event: ApplicatonApproval;

  constructor(event: ApplicatonApproval) {
    this._event = event;
  }

  get approver(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get applicant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DepositWithdrawal extends ethereum.Event {
  get params(): DepositWithdrawal__Params {
    return new DepositWithdrawal__Params(this);
  }
}

export class DepositWithdrawal__Params {
  _event: DepositWithdrawal;

  constructor(event: DepositWithdrawal) {
    this._event = event;
  }

  get applicant(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MemberReputationChange extends ethereum.Event {
  get params(): MemberReputationChange__Params {
    return new MemberReputationChange__Params(this);
  }
}

export class MemberReputationChange__Params {
  _event: MemberReputationChange;

  constructor(event: MemberReputationChange) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewApplication extends ethereum.Event {
  get params(): NewApplication__Params {
    return new NewApplication__Params(this);
  }
}

export class NewApplication__Params {
  _event: NewApplication;

  constructor(event: NewApplication) {
    this._event = event;
  }

  get applicant(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get dataURI(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class NewMembership extends ethereum.Event {
  get params(): NewMembership__Params {
    return new NewMembership__Params(this);
  }
}

export class NewMembership__Params {
  _event: NewMembership;

  constructor(event: NewMembership) {
    this._event = event;
  }

  get member(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TotalReputationChange extends ethereum.Event {
  get params(): TotalReputationChange__Params {
    return new TotalReputationChange__Params(this);
  }
}

export class TotalReputationChange__Params {
  _event: TotalReputationChange;

  constructor(event: TotalReputationChange) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Community__applicationsResult {
  value0: string;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: string, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getDataURI(): string {
    return this.value0;
  }

  getBlockNumber(): BigInt {
    return this.value1;
  }

  getVotesFor(): BigInt {
    return this.value2;
  }
}

export class Community extends ethereum.SmartContract {
  static bind(address: Address): Community {
    return new Community("Community", address);
  }

  CLOCK_MODE(): string {
    let result = super.call("CLOCK_MODE", "CLOCK_MODE():(string)", []);

    return result[0].toString();
  }

  try_CLOCK_MODE(): ethereum.CallResult<string> {
    let result = super.tryCall("CLOCK_MODE", "CLOCK_MODE():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  DENOMINATOR(): BigInt {
    let result = super.call("DENOMINATOR", "DENOMINATOR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DENOMINATOR", "DENOMINATOR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PROTOCOL_FEE(): BigInt {
    let result = super.call("PROTOCOL_FEE", "PROTOCOL_FEE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PROTOCOL_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PROTOCOL_FEE", "PROTOCOL_FEE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  applications(param0: Address): Community__applicationsResult {
    let result = super.call(
      "applications",
      "applications(address):(string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Community__applicationsResult(
      result[0].toString(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_applications(
    param0: Address
  ): ethereum.CallResult<Community__applicationsResult> {
    let result = super.tryCall(
      "applications",
      "applications(address):(string,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Community__applicationsResult(
        value[0].toString(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  clock(): BigInt {
    let result = super.call("clock", "clock():(uint48)", []);

    return result[0].toBigInt();
  }

  try_clock(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("clock", "clock():(uint48)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegatedFromTo(param0: Address, param1: Address): BigInt {
    let result = super.call(
      "delegatedFromTo",
      "delegatedFromTo(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return result[0].toBigInt();
  }

  try_delegatedFromTo(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "delegatedFromTo",
      "delegatedFromTo(address,address):(uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasVoted(param0: Address, param1: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(address,address):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(param0: Address, param1: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(address,address):(bool)", [
      ethereum.Value.fromAddress(param0),
      ethereum.Value.fromAddress(param1)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  membershipDeposit(): BigInt {
    let result = super.call(
      "membershipDeposit",
      "membershipDeposit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_membershipDeposit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "membershipDeposit",
      "membershipDeposit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  membershipVotesThreshold(): BigInt {
    let result = super.call(
      "membershipVotesThreshold",
      "membershipVotesThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_membershipVotesThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "membershipVotesThreshold",
      "membershipVotesThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenId(): BigInt {
    let result = super.call("nextTokenId", "nextTokenId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextTokenId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextTokenId", "nextTokenId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pastReputationOf(member: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "pastReputationOf",
      "pastReputationOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(member),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_pastReputationOf(
    member: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pastReputationOf",
      "pastReputationOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(member),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reputationOf(member: Address): BigInt {
    let result = super.call("reputationOf", "reputationOf(address):(uint256)", [
      ethereum.Value.fromAddress(member)
    ]);

    return result[0].toBigInt();
  }

  try_reputationOf(member: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "reputationOf",
      "reputationOf(address):(uint256)",
      [ethereum.Value.fromAddress(member)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rulesURI(): string {
    let result = super.call("rulesURI", "rulesURI():(string)", []);

    return result[0].toString();
  }

  try_rulesURI(): ethereum.CallResult<string> {
    let result = super.tryCall("rulesURI", "rulesURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalPastReputation(blockNumber: BigInt): BigInt {
    let result = super.call(
      "totalPastReputation",
      "totalPastReputation(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_totalPastReputation(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPastReputation",
      "totalPastReputation(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalReputation(): BigInt {
    let result = super.call(
      "totalReputation",
      "totalReputation():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalReputation(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalReputation",
      "totalReputation():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  unusedDepositOf(param0: Address): BigInt {
    let result = super.call(
      "unusedDepositOf",
      "unusedDepositOf(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_unusedDepositOf(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unusedDepositOf",
      "unusedDepositOf(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingDuration(): BigInt {
    let result = super.call("votingDuration", "votingDuration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votingDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "votingDuration",
      "votingDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApplyForMembershipCall extends ethereum.Call {
  get inputs(): ApplyForMembershipCall__Inputs {
    return new ApplyForMembershipCall__Inputs(this);
  }

  get outputs(): ApplyForMembershipCall__Outputs {
    return new ApplyForMembershipCall__Outputs(this);
  }
}

export class ApplyForMembershipCall__Inputs {
  _call: ApplyForMembershipCall;

  constructor(call: ApplyForMembershipCall) {
    this._call = call;
  }

  get dataURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class ApplyForMembershipCall__Outputs {
  _call: ApplyForMembershipCall;

  constructor(call: ApplyForMembershipCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class ApproveMembershipCall extends ethereum.Call {
  get inputs(): ApproveMembershipCall__Inputs {
    return new ApproveMembershipCall__Inputs(this);
  }

  get outputs(): ApproveMembershipCall__Outputs {
    return new ApproveMembershipCall__Outputs(this);
  }
}

export class ApproveMembershipCall__Inputs {
  _call: ApproveMembershipCall;

  constructor(call: ApproveMembershipCall) {
    this._call = call;
  }

  get applicant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ApproveMembershipCall__Outputs {
  _call: ApproveMembershipCall;

  constructor(call: ApproveMembershipCall) {
    this._call = call;
  }
}

export class DelegateReputationCall extends ethereum.Call {
  get inputs(): DelegateReputationCall__Inputs {
    return new DelegateReputationCall__Inputs(this);
  }

  get outputs(): DelegateReputationCall__Outputs {
    return new DelegateReputationCall__Outputs(this);
  }
}

export class DelegateReputationCall__Inputs {
  _call: DelegateReputationCall;

  constructor(call: DelegateReputationCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DelegateReputationCall__Outputs {
  _call: DelegateReputationCall;

  constructor(call: DelegateReputationCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get info(): InitializeCallInfoStruct {
    return changetype<InitializeCallInfoStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCallInfoStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get symbol(): string {
    return this[1].toString();
  }

  get rulesURI(): string {
    return this[2].toString();
  }

  get membershipDeposit(): BigInt {
    return this[3].toBigInt();
  }

  get membershipVotesThreshold(): BigInt {
    return this[4].toBigInt();
  }

  get votingDuration(): BigInt {
    return this[5].toBigInt();
  }

  get initialMembers(): Array<Address> {
    return this[6].toAddressArray();
  }
}

export class RevokeReputationCall extends ethereum.Call {
  get inputs(): RevokeReputationCall__Inputs {
    return new RevokeReputationCall__Inputs(this);
  }

  get outputs(): RevokeReputationCall__Outputs {
    return new RevokeReputationCall__Outputs(this);
  }
}

export class RevokeReputationCall__Inputs {
  _call: RevokeReputationCall;

  constructor(call: RevokeReputationCall) {
    this._call = call;
  }

  get member(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RevokeReputationCall__Outputs {
  _call: RevokeReputationCall;

  constructor(call: RevokeReputationCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class StartMembershipCall extends ethereum.Call {
  get inputs(): StartMembershipCall__Inputs {
    return new StartMembershipCall__Inputs(this);
  }

  get outputs(): StartMembershipCall__Outputs {
    return new StartMembershipCall__Outputs(this);
  }
}

export class StartMembershipCall__Inputs {
  _call: StartMembershipCall;

  constructor(call: StartMembershipCall) {
    this._call = call;
  }
}

export class StartMembershipCall__Outputs {
  _call: StartMembershipCall;

  constructor(call: StartMembershipCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class WithdrawUnusedDepositCall extends ethereum.Call {
  get inputs(): WithdrawUnusedDepositCall__Inputs {
    return new WithdrawUnusedDepositCall__Inputs(this);
  }

  get outputs(): WithdrawUnusedDepositCall__Outputs {
    return new WithdrawUnusedDepositCall__Outputs(this);
  }
}

export class WithdrawUnusedDepositCall__Inputs {
  _call: WithdrawUnusedDepositCall;

  constructor(call: WithdrawUnusedDepositCall) {
    this._call = call;
  }

  get applicant(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class WithdrawUnusedDepositCall__Outputs {
  _call: WithdrawUnusedDepositCall;

  constructor(call: WithdrawUnusedDepositCall) {
    this._call = call;
  }
}
